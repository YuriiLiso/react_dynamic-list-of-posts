{"version":3,"sources":["api/api.js","components/PostsList/PostsList.jsx","components/NewCommentForm/NewCommentForm.jsx","components/PostDetails/PostDetails.jsx","App.jsx","index.js"],"names":["BASE_URL","getData","url","fetch","then","response","ok","Error","status","statusText","json","result","data","PostsList","selectedPostId","onSetPostId","selectedUserId","useState","posts","setPosts","getUserPosts","userId","a","userPost","getPosts","postsFromServer","selecUserPost","idPost","useEffect","className","map","post","title","id","type","onClick","NewCommentForm","onAddComment","name","setName","email","setEmail","body","setBody","action","method","onSubmit","event","preventDefault","placeholder","value","onChange","target","required","PostDetails","postDetails","setPostDetails","isVisibleComments","setVisibleComments","comments","setComments","removeComment","commentId","commentsSever","getPostDetails","selectedPost","postFromServer","length","comment","key","postId","JSON","stringify","headers","respone","newComment","listOfComments","App","users","setUsers","setUser","setPostId","getUsers","usersFromServer","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f2fe23c3.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport function getData(url) {\n  return fetch(BASE_URL + url)\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      }\n\n      return response.json()\n        .then(result => result.data);\n    });\n}\n\nexport const post = (url, data) => fetch(BASE_URL + url, {\n  method: 'POST',\n  body: JSON.stringify(data),\n  headers: {\n    'Content-type': 'application/json; charset=UTF-8',\n  },\n})\n  .then(respone => respone.json())\n  .then(result => result.data);\n\nexport const remove = url => fetch(BASE_URL + url, { method: 'DELETE' });\n","import React, { useState, useEffect } from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport './PostsList.scss';\n\nimport { getData } from '../../api/api';\n\nexport const PostsList = ({ selectedPostId, onSetPostId, selectedUserId }) => {\n  const [posts, setPosts] = useState([]);\n\n  const getUserPosts = async(userId) => {\n    const userPost = await getData(`/posts?userId=${userId}`);\n\n    setPosts(userPost);\n  };\n\n  const getPosts = async() => {\n    const postsFromServer = await getData('/posts');\n\n    setPosts(postsFromServer);\n  };\n\n  const selecUserPost = (idPost) => {\n    if (!idPost) {\n      onSetPostId(0);\n    }\n\n    onSetPostId(idPost);\n  };\n\n  useEffect(() => {\n    if (selectedUserId) {\n      getUserPosts(selectedUserId);\n    } else {\n      getPosts();\n    }\n  }, [selectedUserId]);\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {posts.map(post => (\n          <li className=\"PostsList__item\">\n            <div>\n              <b>\n                [User #\n                {post.userId}\n                ]:\n              </b>\n              {post.title}\n            </div>\n            {post.id !== selectedPostId ? (\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => selecUserPost(post.id)}\n              >\n                Open\n              </button>\n            ) : (\n              <button\n                type=\"button\"\n                className=\"PostsList__button PostsList__button--selected button\"\n                onClick={() => selecUserPost(0)}\n              >\n                Close\n              </button>\n            )}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nPostsList.propTypes = {\n  selectedPostId: PropTypes.number.isRequired,\n  onSetPostId: PropTypes.func.isRequired,\n  selectedUserId: PropTypes.number.isRequired,\n};\n","import React, { useState } from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm = ({ onAddComment }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  return (\n    <form\n      action=\"https://mate-api.herokuapp.com/posts\"\n      method=\"POST\"\n      className=\"NewCommentForm\"\n      onSubmit={(event) => {\n        event.preventDefault();\n        onAddComment(name, email, body);\n        setName('');\n        setEmail('');\n        setBody('');\n      }}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={event => setName(event.target.value)}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={event => setEmail(event.target.value)}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={body}\n          onChange={event => setBody(event.target.value)}\n          required\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  onAddComment: PropTypes.func.isRequired,\n};\n","import React, { useEffect, useState } from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport { getData, post, remove } from '../../api/api';\n\nimport { NewCommentForm } from '../NewCommentForm';\n\nimport './PostDetails.scss';\n\nexport const PostDetails = ({ selectedPostId }) => {\n  const [postDetails, setPostDetails] = useState(0);\n  const [isVisibleComments, setVisibleComments] = useState(true);\n  const [comments, setComments] = useState([]);\n\n  const addComment = (name, email, body) => {\n    post('/comments', {\n      name, email, body, postId: selectedPostId,\n    }).then((newComment) => {\n      setComments(listOfComments => [newComment, ...listOfComments]);\n    });\n  };\n\n  const removeComment = async(commentId) => {\n    await remove(`/comments/${commentId}`);\n    const commentsSever = await getData(`/comments?postId=${selectedPostId}`);\n\n    setComments(commentsSever);\n  };\n\n  const getPostDetails = async(selectedPost) => {\n    const postFromServer = await getData(`/posts/${selectedPost}`);\n    const commentsSever = await getData(`/comments?postId=${selectedPost}`);\n\n    setPostDetails(postFromServer);\n    setComments(commentsSever);\n  };\n\n  useEffect(() => {\n    if (selectedPostId) {\n      getPostDetails(selectedPostId);\n    } else {\n      setPostDetails(0);\n    }\n  }, [selectedPostId]);\n\n  return (\n    <>\n      {!selectedPostId\n        ? ('Have no details')\n        : (\n          <div className=\"PostDetails\">\n            <h2>Post details:</h2>\n            <section className=\"PostDetails__post\">\n              <p>{postDetails.body}</p>\n            </section>\n            <section className=\"PostDetails__comments\">\n              <button\n                type=\"button\"\n                className=\"button\"\n                onClick={() => setVisibleComments(!isVisibleComments)}\n              >\n                {isVisibleComments\n                  ? `Hide ${comments.length} comments`\n                  : 'Open comments'}\n              </button>\n              {isVisibleComments && (\n                <ul className=\"PostDetails__list\">\n                  {comments.map(comment => (\n                    <li key={comment.id} className=\"PostDetails__list-item\">\n                      <button\n                        type=\"button\"\n                        className=\"PostDetails__remove-button button\"\n                        onClick={() => removeComment(comment.id)}\n                      >\n                        X\n                      </button>\n                      <p>{comment.body}</p>\n                    </li>\n                  ))}\n                </ul>\n              )}\n\n            </section>\n            <section>\n              <div className=\"PostDetails__form-wrapper\">\n                <NewCommentForm onAddComment={addComment} />\n              </div>\n            </section>\n          </div>\n        )\n      }\n    </>\n  );\n};\n\nPostDetails.propTypes = {\n  selectedPostId: PropTypes.number.isRequired,\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\n\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\n\nimport { getData } from './api/api';\n\nconst App = () => {\n  const [users, setUsers] = useState([]);\n  const [selectedUserId, setUser] = useState(0);\n  const [postId, setPostId] = useState(0);\n\n  const getUsers = async() => {\n    const usersFromServer = await getData('/users');\n\n    setUsers(usersFromServer);\n  };\n\n  useEffect(() => {\n    getUsers();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            value={selectedUserId}\n            onChange={({ target }) => {\n              setUser(+target.value);\n            }}\n          >\n            <option value=\"0\">Choose a user</option>\n            {users ? users.map(user => (\n              <option\n                key={user.id}\n                value={user.id}\n              >\n                {user.name}\n              </option>\n            )) : (\n              <option>Loading...</option>\n            )}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            selectedPostId={postId}\n            onSetPostId={setPostId}\n            selectedUserId={selectedUserId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <PostDetails selectedPostId={postId} />\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}