{"version":3,"sources":["api/api.js","api/posts.js","components/PostsList/PostsList.jsx","api/comments.js","components/NewCommentForm/NewCommentForm.jsx","components/PostDetails/PostDetails.jsx","api/users.js","App.jsx","index.js"],"names":["BASE_URL","getData","url","fetch","then","response","ok","Error","status","statusText","json","result","data","getPosts","a","postsFromServer","getUserPosts","userId","posts","getPostDetails","selectedPost","postFromServer","PostsList","selectedPostId","onSetPostId","selectedUserId","useState","setPosts","useEffect","selectUserPost","idPost","className","map","post","key","id","title","type","onClick","getComments","comments","NewCommentForm","onAddComment","name","setName","email","setEmail","body","setBody","onSubmit","event","preventDefault","placeholder","value","onChange","target","required","PostDetails","postDetails","setPostDetails","isVisibleComments","setVisibleComments","setComments","removeComment","commentId","method","length","comment","postId","JSON","stringify","headers","respone","newComment","listOfComments","getUsers","usersFromServer","App","users","setUsers","setUser","setPostId","user","ReactDOM","render","document","getElementById"],"mappings":"oXAAaA,EAAW,iCAEjB,SAASC,EAAQC,GACtB,OAAOC,MAAMH,EAAWE,GACrBE,MAAK,SAACC,GACL,IAAKA,EAASC,GACZ,MAAM,IAAIC,MAAJ,UAAaF,EAASG,OAAtB,cAAkCH,EAASI,aAGnD,OAAOJ,EAASK,OACbN,MAAK,SAAAO,GAAM,OAAIA,EAAOC,WAIxB,ICZMC,EAAQ,uCAAG,4BAAAC,EAAA,sEACQb,EAAQ,UADhB,cAChBc,EADgB,yBAGfA,GAHe,2CAAH,qDAMRC,EAAY,uCAAG,WAAMC,GAAN,eAAAH,EAAA,sEACNb,EAAQ,iBAAD,OAAkBgB,IADnB,cACpBC,EADoB,yBAGnBA,GAHmB,2CAAH,sDAMZC,EAAc,uCAAG,WAAMC,GAAN,eAAAN,EAAA,sEACCb,EAAQ,UAAD,OAAWmB,IADnB,cACtBC,EADsB,yBAGrBA,GAHqB,2CAAH,sDCNdC,EAAY,SAAC,GAAqD,IAAnDC,EAAkD,EAAlDA,eAAgBC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,eACvD,EAA0BC,mBAAS,IAAnC,mBAAOR,EAAP,KAAcS,EAAd,KAEAC,qBAAU,WACJH,EACFT,EAAaS,GACVrB,KAAKuB,GAERd,IACGT,KAAKuB,KAET,CAACF,IAEJ,IAAMI,EAAiB,SAACC,GACjBA,GACHN,EAAY,GAGdA,EAAYM,IAGd,OACE,yBAAKC,UAAU,aACb,sCAEA,wBAAIA,UAAU,mBACXb,EAAMc,KAAI,SAAAC,GAAI,OACb,wBAAIF,UAAU,kBAAkBG,IAAKD,EAAKE,IACxC,6BACE,4CACaF,EAAKhB,OADlB,OAGCgB,EAAKG,OAEPH,EAAKE,KAAOZ,EACX,4BACEc,KAAK,SACLN,UAAU,2BACVO,QAAS,kBAAMT,EAAeI,EAAKE,MAHrC,QAQA,4BACEE,KAAK,SACLN,UAAU,uDACVO,QAAS,kBAAMT,EAAe,KAHhC,gB,OCjDDU,EAAW,uCAAG,WAAMhB,GAAN,eAAAT,EAAA,sEACFb,EAAQ,oBAAD,OAAqBsB,IAD1B,cACnBiB,EADmB,yBAGlBA,GAHkB,2CAAH,sDCIXC,G,MAAiB,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aAC/B,EAAwBhB,mBAAS,IAAjC,mBAAOiB,EAAP,KAAaC,EAAb,KACA,EAA0BlB,mBAAS,IAAnC,mBAAOmB,EAAP,KAAcC,EAAd,KACA,EAAwBpB,mBAAS,IAAjC,mBAAOqB,EAAP,KAAaC,EAAb,KAEA,OACE,0BACEjB,UAAU,iBACVkB,SAAU,SAACC,GACTA,EAAMC,iBACNT,EAAaC,EAAME,EAAOE,GAC1BH,EAAQ,IACRE,EAAS,IACTE,EAAQ,MAGV,yBAAKjB,UAAU,cACb,2BACEM,KAAK,OACLM,KAAK,OACLS,YAAY,YACZrB,UAAU,wBACVsB,MAAOV,EACPW,SAAU,SAAAJ,GAAK,OAAIN,EAAQM,EAAMK,OAAOF,QACxCG,UAAQ,KAIZ,yBAAKzB,UAAU,cACb,2BACEM,KAAK,QACLM,KAAK,QACLS,YAAY,aACZrB,UAAU,wBACVsB,MAAOR,EACPS,SAAU,SAAAJ,GAAK,OAAIJ,EAASI,EAAMK,OAAOF,QACzCG,UAAQ,KAIZ,yBAAKzB,UAAU,cACb,8BACEY,KAAK,OACLS,YAAY,oBACZrB,UAAU,wBACVsB,MAAON,EACPO,SAAU,SAAAJ,GAAK,OAAIF,EAAQE,EAAMK,OAAOF,QACxCG,UAAQ,KAIZ,4BACEnB,KAAK,SACLN,UAAU,wCAFZ,oBC7CO0B,G,MAAc,SAAC,GAAwB,IAAtBlC,EAAqB,EAArBA,eAC5B,EAAsCG,mBAAS,GAA/C,mBAAOgC,EAAP,KAAoBC,EAApB,KACA,EAAgDjC,oBAAS,GAAzD,mBAAOkC,EAAP,KAA0BC,EAA1B,KACA,EAAgCnC,mBAAS,IAAzC,mBAAOc,EAAP,KAAiBsB,EAAjB,KAEAlC,qBAAU,WACJL,GACFJ,EAAeI,GAAgBnB,KAAKuD,GACpCpB,EAAYhB,GAAgBnB,KAAK0D,IAEjCH,EAAe,KAEhB,CAACpC,IAEJ,IAMMwC,EAAa,uCAAG,WAAMC,GAAN,SAAAlD,EAAA,sELRFZ,EKSL,aAAD,OAAc8D,GLTD7D,MAAMH,EAAWE,EAAK,CAAE+D,OAAQ,WKQrC,OAEpB1B,EAAYhB,GAAgBnB,KAAK0D,GAFb,iCLRF,IAAA5D,IKQE,OAAH,sDAKnB,OACE,oCACIqB,EAGE,yBAAKQ,UAAU,eACb,6CACA,6BAASA,UAAU,qBACjB,2BAAI2B,EAAYX,OAElB,6BAAShB,UAAU,yBAChBS,EAAS0B,OAAS,EAEf,4BACE7B,KAAK,SACLN,UAAU,SACVO,QAAS,kBAAMuB,GAAoBD,KAElCA,GAAqBpB,EAAS0B,OAAS,EAAvC,eACW1B,EAAS0B,OADpB,aAEG,iBAGN,cAGHN,GACC,wBAAI7B,UAAU,qBACXS,EAASR,KAAI,SAAAmC,GAAO,OACnB,wBAAIjC,IAAKiC,EAAQhC,GAAIJ,UAAU,0BAC7B,4BACEM,KAAK,SACLN,UAAU,oCACVO,QAAS,kBAAMyB,EAAcI,EAAQhC,MAHvC,KAOA,2BAAIgC,EAAQpB,YAOtB,iCACE,yBAAKhB,UAAU,6BACb,kBAAC,EAAD,CAAgBW,aAzDX,SAACC,EAAME,EAAOE,GAAd,OLZA7C,EKY4B,YLZvBU,EKYoC,CAC1D+B,OAAME,QAAOE,OAAMqB,OAAQ7C,GLbIpB,MAAMH,EAAWE,EAAK,CACvD+D,OAAQ,OACRlB,KAAMsB,KAAKC,UAAU1D,GACrB2D,QAAS,CACP,eAAgB,qCAGjBnE,MAAK,SAAAoE,GAAO,OAAIA,EAAQ9D,UACxBN,MAAK,SAAAO,GAAM,OAAIA,EAAOC,SKMpBR,MAAK,SAACqE,GACPX,GAAY,SAAAY,GAAc,OAAKD,GAAL,mBAAoBC,ULf9B,IAACxE,EAAKU,QK0Bf,qBCtCE+D,EAAQ,uCAAG,4BAAA7D,EAAA,sEACQb,EAAQ,UADhB,cAChB2E,EADgB,yBAGfA,GAHe,2CAAH,qDC6DNC,EAtDH,WACV,MAA0BnD,mBAAS,IAAnC,mBAAOoD,EAAP,KAAcC,EAAd,KACA,EAAkCrD,mBAAS,GAA3C,mBAAOD,EAAP,KAAuBuD,EAAvB,KACA,EAA4BtD,mBAAS,GAArC,mBAAO0C,EAAP,KAAea,EAAf,KAMA,OAJArD,qBAAU,WACR+C,IAAWvE,KAAK2E,KACf,IAGD,yBAAKhD,UAAU,OACb,4BAAQA,UAAU,eAChB,qDAGE,4BACEA,UAAU,qBACVsB,MAAO5B,EACP6B,SAAU,YAAiB,IAAdC,EAAa,EAAbA,OACXyB,GAASzB,EAAOF,SAGlB,4BAAQA,MAAM,KAAd,iBACCyB,EAAQA,EAAM9C,KAAI,SAAAkD,GAAI,OACrB,4BACEhD,IAAKgD,EAAK/C,GACVkB,MAAO6B,EAAK/C,IAEX+C,EAAKvC,SAGR,iDAMR,0BAAMZ,UAAU,aACd,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CACER,eAAgB6C,EAChB5C,YAAayD,EACbxD,eAAgBA,KAIpB,yBAAKM,UAAU,gBACb,kBAAC,EAAD,CAAaR,eAAgB6C,QCnDvCe,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.9b6d76fa.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport function getData(url) {\n  return fetch(BASE_URL + url)\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      }\n\n      return response.json()\n        .then(result => result.data);\n    });\n}\n\nexport const post = (url, data) => fetch(BASE_URL + url, {\n  method: 'POST',\n  body: JSON.stringify(data),\n  headers: {\n    'Content-type': 'application/json; charset=UTF-8',\n  },\n})\n  .then(respone => respone.json())\n  .then(result => result.data);\n\nexport const remove = url => fetch(BASE_URL + url, { method: 'DELETE' });\n","import { getData } from './api';\n\nexport const getPosts = async() => {\n  const postsFromServer = await getData('/posts');\n\n  return postsFromServer;\n};\n\nexport const getUserPosts = async(userId) => {\n  const posts = await getData(`/posts?userId=${userId}`);\n\n  return posts;\n};\n\nexport const getPostDetails = async(selectedPost) => {\n  const postFromServer = await getData(`/posts/${selectedPost}`);\n\n  return postFromServer;\n};\n","import React, { useState, useEffect } from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport './PostsList.scss';\n\nimport { getUserPosts, getPosts } from '../../api/posts';\n\nexport const PostsList = ({ selectedPostId, onSetPostId, selectedUserId }) => {\n  const [posts, setPosts] = useState([]);\n\n  useEffect(() => {\n    if (selectedUserId) {\n      getUserPosts(selectedUserId)\n        .then(setPosts);\n    } else {\n      getPosts()\n        .then(setPosts);\n    }\n  }, [selectedUserId]);\n\n  const selectUserPost = (idPost) => {\n    if (!idPost) {\n      onSetPostId(0);\n    }\n\n    onSetPostId(idPost);\n  };\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {posts.map(post => (\n          <li className=\"PostsList__item\" key={post.id}>\n            <div>\n              <b>\n                {`[User #${post.userId}]:`}\n              </b>\n              {post.title}\n            </div>\n            {post.id !== selectedPostId ? (\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => selectUserPost(post.id)}\n              >\n                Open\n              </button>\n            ) : (\n              <button\n                type=\"button\"\n                className=\"PostsList__button PostsList__button--selected button\"\n                onClick={() => selectUserPost(0)}\n              >\n                Close\n              </button>\n            )}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nPostsList.propTypes = {\n  selectedPostId: PropTypes.number.isRequired,\n  onSetPostId: PropTypes.func.isRequired,\n  selectedUserId: PropTypes.number.isRequired,\n};\n","import { getData } from './api';\n\nexport const getComments = async(selectedPostId) => {\n  const comments = await getData(`/comments?postId=${selectedPostId}`);\n\n  return comments;\n};\n","import React, { useState } from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm = ({ onAddComment }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={(event) => {\n        event.preventDefault();\n        onAddComment(name, email, body);\n        setName('');\n        setEmail('');\n        setBody('');\n      }}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={event => setName(event.target.value)}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"email\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={event => setEmail(event.target.value)}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={body}\n          onChange={event => setBody(event.target.value)}\n          required\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  onAddComment: PropTypes.func.isRequired,\n};\n","import React, { useEffect, useState } from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport { post, remove } from '../../api/api';\nimport { getComments } from '../../api/comments';\nimport { getPostDetails } from '../../api/posts';\n\nimport { NewCommentForm } from '../NewCommentForm';\n\nimport './PostDetails.scss';\n\nexport const PostDetails = ({ selectedPostId }) => {\n  const [postDetails, setPostDetails] = useState(0);\n  const [isVisibleComments, setVisibleComments] = useState(true);\n  const [comments, setComments] = useState([]);\n\n  useEffect(() => {\n    if (selectedPostId) {\n      getPostDetails(selectedPostId).then(setPostDetails);\n      getComments(selectedPostId).then(setComments);\n    } else {\n      setPostDetails(0);\n    }\n  }, [selectedPostId]);\n\n  const addComment = (name, email, body) => post('/comments', {\n    name, email, body, postId: selectedPostId,\n  }).then((newComment) => {\n    setComments(listOfComments => [newComment, ...listOfComments]);\n  });\n\n  const removeComment = async(commentId) => {\n    await remove(`/comments/${commentId}`);\n    getComments(selectedPostId).then(setComments);\n  };\n\n  return (\n    <>\n      {!selectedPostId\n        ? ('Have no details')\n        : (\n          <div className=\"PostDetails\">\n            <h2>Post details:</h2>\n            <section className=\"PostDetails__post\">\n              <p>{postDetails.body}</p>\n            </section>\n            <section className=\"PostDetails__comments\">\n              {comments.length > 0\n                ? (\n                  <button\n                    type=\"button\"\n                    className=\"button\"\n                    onClick={() => setVisibleComments(!isVisibleComments)}\n                  >\n                    {isVisibleComments && comments.length > 0\n                      ? `Hide ${comments.length} comments`\n                      : 'Open comments'}\n                  </button>\n                ) : (\n                  'No comments'\n                )}\n\n              {isVisibleComments && (\n                <ul className=\"PostDetails__list\">\n                  {comments.map(comment => (\n                    <li key={comment.id} className=\"PostDetails__list-item\">\n                      <button\n                        type=\"button\"\n                        className=\"PostDetails__remove-button button\"\n                        onClick={() => removeComment(comment.id)}\n                      >\n                        X\n                      </button>\n                      <p>{comment.body}</p>\n                    </li>\n                  ))}\n                </ul>\n              )}\n\n            </section>\n            <section>\n              <div className=\"PostDetails__form-wrapper\">\n                <NewCommentForm onAddComment={addComment} />\n              </div>\n            </section>\n          </div>\n        )\n      }\n    </>\n  );\n};\n\nPostDetails.propTypes = {\n  selectedPostId: PropTypes.number.isRequired,\n};\n","import { getData } from './api';\n\nexport const getUsers = async() => {\n  const usersFromServer = await getData('/users');\n\n  return usersFromServer;\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\n\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\n\nimport { getUsers } from './api/users';\n\nconst App = () => {\n  const [users, setUsers] = useState([]);\n  const [selectedUserId, setUser] = useState(0);\n  const [postId, setPostId] = useState(0);\n\n  useEffect(() => {\n    getUsers().then(setUsers);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            value={selectedUserId}\n            onChange={({ target }) => {\n              setUser(+target.value);\n            }}\n          >\n            <option value=\"0\">Choose a user</option>\n            {users ? users.map(user => (\n              <option\n                key={user.id}\n                value={user.id}\n              >\n                {user.name}\n              </option>\n            )) : (\n              <option>Loading...</option>\n            )}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            selectedPostId={postId}\n            onSetPostId={setPostId}\n            selectedUserId={selectedUserId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <PostDetails selectedPostId={postId} />\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}